#!/bin/bash
set -euxo pipefail

# ---- System update ----
dnf -y update

# ---- Install Node.js and MySQL client ----
dnf -y install nodejs npm mariadb105

# ---- Create app directory ----
mkdir -p /var/www/html
cd /var/www/html

# ---- Create package.json ----
cat > package.json <<'JSON'
{
  "name": "employee-management",
  "version": "1.0.0",
  "description": "Employee Management System with Node.js",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mysql2": "^3.6.0",
    "ejs": "^3.1.9",
    "body-parser": "^1.20.2"
  }
}
JSON

# ---- Install dependencies ----
npm install

# ---- Create public directory ----
mkdir -p public

# ---- Create CSS file ----
cat > public/style.css <<'CSS'
*{margin:0;padding:0;box-sizing:border-box}
body{font-family:Arial,sans-serif;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);min-height:100vh;color:#232f3e}
.header{background:linear-gradient(90deg,#232f3e 0%,#4a148c 100%);color:white;padding:20px 0;box-shadow:0 2px 10px rgba(0,0,0,0.1)}
.header-content{max-width:1200px;margin:0 auto;padding:0 20px;display:flex;align-items:center}
.cloud-logo{font-size:24px;font-weight:bold;margin-right:30px;color:#ff9900}
.service-name{font-size:20px;font-weight:500}
.container{max-width:1200px;margin:30px auto;padding:0 20px}
.main-card{background:white;border-radius:12px;box-shadow:0 4px 20px rgba(0,0,0,0.1);overflow:hidden}
.card-header{background:linear-gradient(135deg,#6a1b9a 0%,#8e24aa 100%);color:white;padding:25px 30px;border-bottom:3px solid #4a148c}
.card-title{font-size:28px;font-weight:600;margin:0;display:flex;align-items:center}
.card-subtitle{font-size:14px;opacity:0.9;margin-top:5px}
.card-body{padding:30px}
.section{background:#f8f9fa;border-radius:8px;padding:25px;margin-bottom:25px;border-left:4px solid #6a1b9a}
.section-title{color:#4a148c;font-size:18px;font-weight:600;margin-bottom:20px}
.form-group{margin-bottom:20px}
label{display:block;margin-bottom:8px;font-weight:600;color:#232f3e;font-size:14px}
input[type="text"],input[type="email"]{width:100%;padding:12px 16px;border:2px solid #e1e5e9;border-radius:6px;font-size:14px;transition:all 0.3s ease;background:white}
input[type="text"]:focus,input[type="email"]:focus{outline:none;border-color:#6a1b9a;box-shadow:0 0 0 3px rgba(106,27,154,0.1)}
.btn{padding:12px 24px;border:none;border-radius:6px;cursor:pointer;font-size:14px;font-weight:600;margin-right:10px;margin-bottom:10px;transition:all 0.3s ease;text-decoration:none;display:inline-block;text-align:center}
.btn-primary{background:linear-gradient(135deg,#6a1b9a 0%,#8e24aa 100%);color:white;box-shadow:0 2px 8px rgba(106,27,154,0.3)}
.btn-primary:hover{transform:translateY(-2px);box-shadow:0 4px 12px rgba(106,27,154,0.4)}
.btn-warning{background:linear-gradient(135deg,#ff8f00 0%,#ffa726 100%);color:white;box-shadow:0 2px 8px rgba(255,143,0,0.3)}
.btn-warning:hover{transform:translateY(-2px);box-shadow:0 4px 12px rgba(255,143,0,0.4)}
.btn-danger{background:linear-gradient(135deg,#d32f2f 0%,#f44336 100%);color:white;box-shadow:0 2px 8px rgba(211,47,47,0.3)}
.btn-danger:hover{transform:translateY(-2px);box-shadow:0 4px 12px rgba(211,47,47,0.4)}
.btn-secondary{background:linear-gradient(135deg,#546e7a 0%,#78909c 100%);color:white;box-shadow:0 2px 8px rgba(84,110,122,0.3)}
.btn-secondary:hover{transform:translateY(-2px);box-shadow:0 4px 12px rgba(84,110,122,0.4)}
.data-table{width:100%;border-collapse:collapse;background:white;border-radius:8px;overflow:hidden;box-shadow:0 2px 10px rgba(0,0,0,0.1)}
.data-table th{background:linear-gradient(135deg,#4a148c 0%,#6a1b9a 100%);color:white;padding:16px;text-align:left;font-weight:600;font-size:14px;text-transform:uppercase;letter-spacing:0.5px}
.data-table td{padding:16px;border-bottom:1px solid #e1e5e9;font-size:14px}
.data-table tr:hover{background-color:#f8f9fa}
.data-table tr:last-child td{border-bottom:none}
.alert{padding:16px 20px;border-radius:8px;margin:20px 0;font-weight:500;display:flex;align-items:center}
.alert-success{background:linear-gradient(135deg,#e8f5e8 0%,#c8e6c9 100%);color:#2e7d32;border-left:4px solid #4caf50}
.alert-error{background:linear-gradient(135deg,#ffebee 0%,#ffcdd2 100%);color:#c62828;border-left:4px solid #f44336}
.stats-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:20px;margin-bottom:30px}
.stat-card{background:white;padding:20px;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.1);border-left:4px solid #6a1b9a}
.stat-number{font-size:32px;font-weight:bold;color:#6a1b9a}
.stat-label{color:#666;font-size:14px;margin-top:5px}
.empty-state{text-align:center;padding:60px 20px;color:#666}
.empty-state-icon{font-size:64px;margin-bottom:20px;opacity:0.5}
@media (max-width:768px){
.header-content{flex-direction:column;text-align:center}
.cloud-logo{margin-right:0;margin-bottom:10px}
.data-table{font-size:12px}
.data-table th,.data-table td{padding:12px 8px}
}
CSS

# ---- Create views directory ----
mkdir -p views

# ---- Create main server file ----
cat > server.js <<'JS'
const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const port = 3000;

// Database configuration
const dbConfig = {
  host: 'YOUR_RDS_ENDPOINT_HERE',
  user: 'admin',
  password: 'password123',
  database: 'employeedb',
  charset: 'utf8mb4'
};

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Database connection
const db = mysql.createConnection(dbConfig);

db.connect((err) => {
  if (err) {
    console.error('データベース接続エラー:', err);
    return;
  }
  console.log('データベースに接続しました');
});

// Routes
app.get('/', async (req, res) => {
  let message = '';
  let messageType = '';
  let editData = null;
  
  // Get edit data if edit parameter exists
  if (req.query.edit) {
    try {
      const [rows] = await db.promise().execute('SELECT * FROM employees WHERE id = ?', [req.query.edit]);
      if (rows.length > 0) {
        editData = rows[0];
      }
    } catch (error) {
      message = 'データ取得エラー: ' + error.message;
      messageType = 'error';
    }
  }
  
  // Get employee count
  let totalEmployees = 0;
  try {
    const [countRows] = await db.promise().execute('SELECT COUNT(*) as total FROM employees');
    totalEmployees = countRows[0].total;
  } catch (error) {
    console.error('Count error:', error);
  }
  
  // Get all employees
  let employees = [];
  try {
    const [rows] = await db.promise().execute('SELECT id, name, email, department, created_at FROM employees ORDER BY created_at DESC');
    employees = rows;
  } catch (error) {
    message = 'クエリエラー: ' + error.message;
    messageType = 'error';
  }
  
  res.render('index', {
    message,
    messageType,
    editData,
    totalEmployees,
    employees,
    currentYear: new Date().getFullYear()
  });
});

// Handle form submissions
app.post('/', async (req, res) => {
  const { action, id, name, email, department } = req.body;
  let message = '';
  let messageType = '';
  
  try {
    if (action === 'add') {
      if (name && email) {
        await db.promise().execute(
          'INSERT INTO employees (name, email, department) VALUES (?, ?, ?)',
          [name.trim(), email.trim(), department.trim()]
        );
        message = '✅ 社員情報を正常に追加しました！';
        messageType = 'success';
      } else {
        message = '❌ 氏名とメールは必須です。';
        messageType = 'error';
      }
    } else if (action === 'update') {
      if (id && name && email) {
        await db.promise().execute(
          'UPDATE employees SET name = ?, email = ?, department = ? WHERE id = ?',
          [name.trim(), email.trim(), department.trim(), parseInt(id)]
        );
        message = '✅ 社員情報を正常に更新しました！';
        messageType = 'success';
      }
    } else if (action === 'delete') {
      if (id) {
        await db.promise().execute('DELETE FROM employees WHERE id = ?', [parseInt(id)]);
        message = '✅ 社員情報を正常に削除しました！';
        messageType = 'success';
      }
    }
  } catch (error) {
    message = '❌ エラー: ' + error.message;
    messageType = 'error';
  }
  
  res.redirect('/?message=' + encodeURIComponent(message) + '&type=' + messageType);
});

// Start server
app.listen(port, () => {
  console.log(`サーバーがポート${port}で起動しました`);
});
JS

# ---- Create EJS template ----
cat > views/index.ejs <<'EJS'
<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>社員管理システム</title>
<link rel="stylesheet" href="/style.css">
</head>
<body>
<div class="header">
  <div class="header-content">
    <div class="cloud-logo">☁️ Cloud</div>
    <div class="service-name">社員管理システム</div>
  </div>
</div>
<div class="container">
  <div class="main-card">
    <div class="card-header">
      <h1 class="card-title">🏢 Employee Management Console</h1>
      <div class="card-subtitle">クラウドハンズオン - 完全CRUD対応システム (Node.js版)</div>
    </div>
    <div class="card-body">

<% if (message) { %>
  <div class="alert alert-<%= messageType %>"><%= message %></div>
<% } %>

<% if (editData) { %>
<div class="section">
  <h3 class="section-title">✏️ 社員情報編集</h3>
  <form method="POST">
    <input type="hidden" name="action" value="update">
    <input type="hidden" name="id" value="<%= editData.id %>">
    <div class="form-group">
      <label for="edit_name">氏名:</label>
      <input type="text" id="edit_name" name="name" value="<%= editData.name %>" required>
    </div>
    <div class="form-group">
      <label for="edit_email">メールアドレス:</label>
      <input type="email" id="edit_email" name="email" value="<%= editData.email %>" required>
    </div>
    <div class="form-group">
      <label for="edit_department">部署:</label>
      <input type="text" id="edit_department" name="department" value="<%= editData.department %>" placeholder="例: 開発部">
    </div>
    <button type="submit" class="btn btn-primary">更新</button>
    <a href="/" class="btn btn-secondary">キャンセル</a>
  </form>
</div>
<% } else { %>
<div class="section">
  <h3 class="section-title">➕ 新規社員追加</h3>
  <form method="POST">
    <input type="hidden" name="action" value="add">
    <div class="form-group">
      <label for="name">氏名:</label>
      <input type="text" id="name" name="name" required>
    </div>
    <div class="form-group">
      <label for="email">メールアドレス:</label>
      <input type="email" id="email" name="email" required>
    </div>
    <div class="form-group">
      <label for="department">部署:</label>
      <input type="text" id="department" name="department" placeholder="例: 開発部">
    </div>
    <button type="submit" class="btn btn-primary">社員を追加</button>
  </form>
</div>
<% } %>

<div class="section">
  <h3 class="section-title">📋 社員一覧</h3>
  
  <div class="stats-grid">
    <div class="stat-card">
      <div class="stat-number"><%= totalEmployees %></div>
      <div class="stat-label">登録社員数</div>
    </div>
    <div class="stat-card">
      <div class="stat-number"><%= currentYear %></div>
      <div class="stat-label">現在年度</div>
    </div>
  </div>
  
  <% if (employees.length > 0) { %>
    <table class="data-table">
      <tr><th>ID</th><th>氏名</th><th>メールアドレス</th><th>部署</th><th>登録日時</th><th>操作</th></tr>
      <% employees.forEach(function(row) { %>
        <tr>
          <td><strong><%= row.id %></strong></td>
          <td><%= row.name %></td>
          <td><%= row.email %></td>
          <td><span style="background: #e3f2fd; padding: 4px 8px; border-radius: 4px; font-size: 12px;"><%= row.department %></span></td>
          <td><%= new Date(row.created_at).toLocaleString('ja-JP') %></td>
          <td>
            <a href="/?edit=<%= row.id %>" class="btn btn-warning">編集</a>
            <form method="POST" style="display:inline;" onsubmit="return confirmDelete('<%= row.name %>')">
              <input type="hidden" name="action" value="delete">
              <input type="hidden" name="id" value="<%= row.id %>">
              <button type="submit" class="btn btn-danger">削除</button>
            </form>
          </td>
        </tr>
      <% }); %>
    </table>
  <% } else { %>
    <div class="empty-state">
      <div class="empty-state-icon">📄</div>
      <h3>社員データがありません</h3>
      <p>上のフォームから新しい社員を追加してください。</p>
    </div>
  <% } %>
</div>

    </div>
  </div>
</div>

<script>
function confirmDelete(name) {
    return confirm('⚠️ 削除確認\n\n本当に「' + name + '」さんの情報を削除しますか？\n\n⚠️ この操作は元に戻せません。');
}
</script>
</body>
</html>
EJS

# ---- Create database initialization script ----
cat > init_db.js <<'JS'
const mysql = require('mysql2');

const dbConfig = {
  host: 'YOUR_RDS_ENDPOINT_HERE',
  user: 'admin',
  password: 'password123',
  database: 'employeedb',
  charset: 'utf8mb4'
};

const db = mysql.createConnection(dbConfig);

async function initDatabase() {
  try {
    // Create table
    await db.promise().execute(`
      CREATE TABLE IF NOT EXISTS employees (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) NOT NULL UNIQUE,
        department VARCHAR(50),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
    `);
    
    // Insert sample data
    const sampleData = [
      ['山田太郎', 'yamada@example.com', '開発部'],
      ['佐藤花子', 'sato@example.com', '営業部'],
      ['田中次郎', 'tanaka@example.com', '総務部']
    ];
    
    for (const [name, email, department] of sampleData) {
      try {
        await db.promise().execute(
          'INSERT IGNORE INTO employees (name, email, department) VALUES (?, ?, ?)',
          [name, email, department]
        );
      } catch (error) {
        // Ignore duplicate entries
      }
    }
    
    console.log('🎉 データベース初期化完了');
    process.exit(0);
  } catch (error) {
    console.error('初期化エラー:', error);
    process.exit(1);
  }
}

initDatabase();
JS

# ---- Set permissions ----
chown -R ec2-user:ec2-user /var/www/html
chmod 755 /var/www/html

# ---- Create systemd service ----
cat > /etc/systemd/system/employee-app.service <<'SERVICE'
[Unit]
Description=Employee Management Node.js App
After=network.target

[Service]
Type=simple
User=ec2-user
WorkingDirectory=/var/www/html
ExecStart=/usr/bin/node server.js
Restart=always
RestartSec=10
Environment=NODE_ENV=production

[Install]
WantedBy=multi-user.target
SERVICE

# ---- Enable and start service ----
systemctl daemon-reload
systemctl enable employee-app
systemctl start employee-app

echo "✅ Node.js クラウドコンソール風 完全CRUD対応Webアプリケーションセットアップ完了"
echo "📝 RDS作成後に server.js と init_db.js のエンドポイントを更新し、node init_db.js を実行してください。"
echo "🎯 機能: Create(追加) / Read(表示) / Update(編集) / Delete(削除) + クラウドコンソール風UI (Node.js版)"
echo "🚀 サービス状態確認: systemctl status employee-app"