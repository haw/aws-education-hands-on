AWSTemplateFormatVersion: '2010-09-09'
Description: 'Day3 Database Lab - Employee Management System (AWS Academy Compatible - No Assets)'

Resources:
  # VPC
  EmployeeAppVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: employee-app-vpc-cf

  # Internet Gateway
  EmployeeAppIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: employee-app-igw-cf

  # Attach IGW to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref EmployeeAppVpc
      InternetGatewayId: !Ref EmployeeAppIGW

  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EmployeeAppVpc
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-1-cf

  # Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EmployeeAppVpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-2-cf

  # Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EmployeeAppVpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: private-subnet-1-cf

  # Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EmployeeAppVpc
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: private-subnet-2-cf

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EmployeeAppVpc
      Tags:
        - Key: Name
          Value: public-route-table-cf

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref EmployeeAppIGW

  # Associate Public Subnets with Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Database Subnet Group
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Employee Database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: employee-db-subnet-group-cf

  # Web Server Security Group
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Employee Web Server
      VpcId: !Ref EmployeeAppVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP access to Employee Management System
      Tags:
        - Key: Name
          Value: employee-web-server-sg-cf

  # Database Security Group
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Employee Database
      VpcId: !Ref EmployeeAppVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
          Description: Allow MySQL access from Web Server
      Tags:
        - Key: Name
          Value: employee-database-sg-cf

  # RDS Database Instance
  EmployeeDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: employee-database-cf
      DBName: employeedb
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: '8.4.3'
      MasterUsername: admin
      MasterUserPassword: password123
      AllocatedStorage: 20
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      BackupRetentionPeriod: 0
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: false
      Tags:
        - Key: Name
          Value: employee-database-cf

  # EC2 Instance
  EmployeeWebServer:
    Type: AWS::EC2::Instance
    DependsOn: EmployeeDatabase
    Properties:
      InstanceType: t3.micro
      ImageId: ami-00ca32bbc84273381  # Amazon Linux 2023 (us-east-1) - Latest
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: LabInstanceProfile
      Tags:
        - Key: Name
          Value: employee-web-server-cf
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -euxo pipefail

          # Update system and install prerequisites
          dnf -y update
          dnf -y install git nodejs npm mariadb105

          # Prepare app directory
          mkdir -p /var/www/html
          chmod 755 /var/www/html

          # Sparse-clone only the app sources from GitHub
          WORKDIR=/opt/employee-app-src
          rm -rf "$WORKDIR"
          mkdir -p "$WORKDIR"
          cd "$WORKDIR"

          git init
          git remote add origin https://github.com/haw/aws-education-hands-on.git
          git config core.sparseCheckout true
          git sparse-checkout init --cone || true
          echo "day3/db-lab/materials/app/*" > .git/info/sparse-checkout
          git fetch --depth=1 origin main
          git checkout -b main origin/main

          # Deploy to /var/www/html and install deps
          cp -r day3/db-lab/materials/app/* /var/www/html/
          cd /var/www/html
          npm install

          # Inject RDS endpoint into app sources
          sed -i "s/YOUR_RDS_ENDPOINT_HERE/${EmployeeDatabase.Endpoint.Address}/g" server.js init_db.js

          # Set permissions
          chown -R ec2-user:ec2-user /var/www/html

          # Create systemd service
          cat > /etc/systemd/system/employee-app.service << 'SERVICE_EOF'
          [Unit]
          Description=Employee Management System
          After=network.target

          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/var/www/html
          ExecStart=/usr/bin/node server.js
          Restart=always

          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF

          systemctl daemon-reload
          systemctl enable employee-app

          # Wait for RDS and initialize
          RETRY_COUNT=0
          while ! mysqladmin ping -h ${EmployeeDatabase.Endpoint.Address} -u admin -ppassword123 --silent; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -ge 60 ]; then
              echo "RDS connection timeout"
              break
            fi
            echo "Waiting for RDS... ($RETRY_COUNT/60)"
            sleep 30
          done

          # Initialize DB (non-fatal if already initialized)
          node init_db.js || true

          # Start app
          systemctl start employee-app

          echo "Employee Management System setup complete!"
          echo "Access at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):3000"

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref EmployeeAppVpc
    
  ApplicationUrl:
    Description: Employee Management System URL
    Value: !Sub 'http://${EmployeeWebServer.PublicIp}:3000'
    
  DatabaseEndpoint:
    Description: RDS Database Endpoint
    Value: !GetAtt EmployeeDatabase.Endpoint.Address

